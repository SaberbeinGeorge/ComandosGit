NOTA: 
     El símbolo de "+" no va, solo lo pongo qué atributo se le agrega después
     -------------si no te funciona gitk-----ejecuta: gitk.exe . ------
     git clone "url ssh o http"----:
     Clonando un repositorio remoto-------Al clonar un repositorio remoto solo se clonara la rama master podemos hacer pull(si el repo es publico)
                                   ___pero al no ser agregado como contribuidor no podremos hacer push____


CONSEPTOS IMPORTANTES A CONSIDERAR Y APUNTES RAPIDOS
     Nota: Directorio también se conoce como repositorio o en forma abreviada repo. 
          El repo en la máquina local del usuario se llama "Repo local" 
          mientras que el repo en el servidor git se llama "Repo remoto".

     git merge --abort ---------------Cómo revertir un merge Si nos hemos equivocado y queremos cancelar el merge

     -Para copiar el repositorio remoto al directorio de trabajo local, 
          se utiliza el comando "git clone <url>", y para enviar cambios al repositorio remoto se utiliza git push


AFREGAR UN ARCHIVO A GIT:
     git init -----------------------------------Se activa el comienzo de subir la carpeta
     git add + archivo --------------------------Agrega al documento
     git commit -m "mensaje" --------------------Se agrega un mensaje sobre lo que se cambio (obligatorio)
     git commit -am "mensaje"--------------------sirve para hacer un add y crear el commit, (solo se puede usar con archivos que ya usaron add)por ende si creas un archivo nuevo no funcionara.
     git add + archivo
     git commit --amend -------------------------sirve para evitar crear otro commit y utilizar el anterior

USO DE GITHUB
     git remote add origin +URL------ 
     git add origin master + link ---------------Subir la rama master a GitHub
     git pull origin master ---------------------Trae todos los cambios agregados desde gitHub
     git push origin master ---------------------Envia tus archivos al master en github

     Cómo conectar un repositorio de Github a nuestro documento local
     Si queremos conectar el repositorio de GitHub con nuestro repositorio local, que creamos usando el comando git init, debemos ejecutar las siguientes instrucciones:

     Guardar la URL del repositorio de GitHub con el nombre de origin
     ---git remote add origin URL
     Verificar que la URL se haya guardado correctamente:
     ---git remote
     ---git remote -v
     Traer la versión del repositorio remoto y hacer merge para crear un commit con los archivos de ambas partes. Podemos usar git fetch y git merge o solo git pull con el flag --allow-unrelated-histories:
     ----git pull origin main --allow-unrelated-histories
     Por último, ahora sí podemos hacer git push para guardar los cambios de nuestro repositorio local en GitHub:
     -----git push origin main

     *PRECAUCION*(coneccion a github con http o ssh {mas informacion CLASE 19 Curso profesional de git y github})
     git remote add origin "link HTTP" ----------comprobar con (git remote ="origin")(git remote -v =link[fetch], link[push])
     -----git pull origin main --allow-unrelated-histories----(fuerza a traer los archivos de github a tu repositorio local)fusiona el git remoto con la rama local(se abre vim automaticamente,y confirmas)con esto ya trajo los archivos de mi git remoto al git local
     -------git push -u origin main------------------------------de esta manera terminamos de fusionar los archivos locales con los remotos

MOVIENDOSE A UN COMMIT DETERMINADO
     git checkout +(codigo commit)+ (archivo que se desea regresar) 
     ejemplo: git checkout 78jendfkfjhddofjffldjdmmckgj historia.txt 
     y para regresar :
     git checkout main historia.txt



OPCIONES:
     git status ---------------------------------Muestra el estado de los archivos de la carpeta
     git show -----------------------------------Muestra los cambios que se han hecho 
     git log ------------------------------------Muestra todos los commits realizados
     dir ----------------------------------------Abrir
     pwd ----------------------------------------Donde estoy
     esc + i ------------------------------------Puedes empezar a escribir el commit (si es que usaste el comando "git commit")
     esc + shift + z + z ------------------------Se guarda un archivo con bin 
     git shortlog -------------------------------Cuantos commits a hecho cada miembro
     git shortlog -sn ---------------------------Personas que han hecho ciertos commits
     git shortlog -sn --all ---------------------Muestra todos los commits (incluso los borrados)
     git shortlog -sn --all --no-merges ---------Muestra todos los commits execto los merge
     git config --global alias.'nombre' "comanado(sin git)"





BLAME:
     git blame + 'archivo.' ---------------------Muestra quien hizo que cambio al archivo
     git blame -c + 'archivo.' ------------------Lo muestra mas bonito
     git blame + 'archivo.' +L12,53 -------------Muestra quien hizo los cambios especificamente en esas lineas
     git blame -c + 'archivo.' +L12,53 ----------Lo muestra mas bonito
     git 'comando' --help -----------------------Muestra como funcin el comando en una pagina web





EXTRAS:
     git log + archivo --------------------------Muestra todos los commits realizados al archivo
     git reset + version --soft -----------------Permite volver a una versión anterior (Borramos todo el historial y los registros de Git pero guardamos los cambios que tengamos en Staging, así podemos aplicar las últimas actualizaciones a un nuevo commit.)
                         --hard -----------------(Borra todo. Todo todito, absolutamente todo. Toda la información de los commits y del área de staging se borra del historial.)
     git reset (hard,mixed y soft)---------------es un comando para moverse, dependiendo de que modo usemos eliminara(--hard), guardara en zona de no-monitoreada(--mixed) o zona monitoreada(--soft)
     git diff + version1 + version2 -------------Se compara la versión 1 y 2 entre sí
     git checkout + master + archivo ------------Muestra cómo era el archivo el la versión señalada
     git checkout + version + archivo -----------Muestra cómo era el archivo el la versión señalada
     git rm --cached ----------------------------Se cancela la subida (Elimina los archivos de nuestro repositorio local y del área de staging,)
     git rm --force -----------------------------Elimina los archivos de Git y del disco duro. Git siempre guarda todo, por lo que podemos acceder al registro de la existencia de los archivos, de modo que podremos recuperarlos si es necesario (pero debemos usar comandos más avanzados).
     . ------------------------------------------Hace referencia a todas la carpeta
     code + archivo -----------------------------Se abre Visual Studio Code en el archivo marcado
     alias + VARIABLE="nombreDeComando"----------Genera variables con comandos para evitar escribir un mega codigo
     git reset HEAD------------------------------Este es el comando para sacar archivos del área de staging. No para borrarlos ni nada de eso, solo para que los últimos cambios de estos archivos no se envíen al último commit, a menos que cambiemos de opinión y los incluyamos de nuevo en staging con git add, por supuesto.
     git commit -am " " -------------------------agrega al staging y crea el commit.


FORK
 1- clonamos el repositorio en Github simplemente precionando el boton de Fork.
 2-En el repositorio local crearemos una fuente distinta al de origin{
     git remote add upstream "link clone ssh o http"----------esto crea un apuntador directo al repositorio GitHub del proyecto que
     queremos colaborar(llamo colaborar porque esto es en caso de que no estes agregado como contribuidor) de esta manera mantendremos
     actualizado nuestro proyecto con el proyecto que le hicimos el fork podria ayudar a evitar conflictos:
     git pull upstream + rama -----------traera las actualizaciones del proyecto que le hicimos fork al principio.}
 3-git push origin main------actualizamos nuestro repositorio remoto.


README.md
 https://pandao.github.io/editor.md/en.html -----------------pagina para editar tu archivo README.md
     no recomendado para insertar emojins, si desea insertar emojins acceda a este link
          https://github.com/SaberbeinGeorge/emoji-cheat-sheet

CHERRY-PICK:
Mala practica
Nota: Existe un mundo alternativo en el cual vamos avanzando en una rama pero necesitamos
      en master uno de esos avances de la rama, para eso utilizamos el comando git cherry-pick IDCommit.
      cherry-pick es una mala práctica porque significa que estamos reconstruyendo la historia, usa cherry-pick con sabiduría. Si no sabes lo que estás haciendo ten mucho cuidado.
     
     git cherry-PICK + IDCommit -----------Trae un commit especifico de una rama
           (no registra en la historia el uso de cherry-pick solo registrara como la 
           creacion de un commit en la rama donde fue traido el commit)

AMMEND:
     git commit --amend
          A veces hacemos un commit, pero resulta que no queríamos mandarlo porque faltaba algo más. Utilizamos
          git commit --amend, amend en inglés es remendar y lo que hará es que los cambios que hicimos nos los agregará al commit anterior.
     
     NOTA: el commit --amend es muy util, pero hay que tener cuidado en algunos casos, como en el caso de que el commit que quieras enmendar 
     lo hayas pusheado al repositorio remoto, entonces quieras enmendar un commit que esta en remoto.
     Así como en el caso de cherry-pick y rebase, hay que usarlo con cuidado porque modificará la historia de tu repositorio.
     Digamos que haces un cambio al archivo a.txt y haces un commit.
     Luego subes ese commit al repositorio haciendo push.
     Pero se te olvido agregar cambios a ese commit y quieres enmendarlo.
     Haces un git --amend y en la historia de tu repositorio local, pareciera que no ha pasado nada: enmendaste tu commit.
     Pero resulta que en el repositorio remoto eso no ha ocurrido, ese git --amend no tuvo lugar en el repositorio remoto,
     y al hacer git status te mostrará un error así:
     "Your branch and 'origin/master' have diverged,
     and have 1 and 1 different commits each, respectively.
     (use "git pull" to merge the remote branch into yours)"


CLEAN:
     git clean --dry-run ------------------------Dice todos las copias que estn hechas por error que se van a borrar(antes de hacer push)
     git clean -f -------------------------------Se borran (confirmacion)




STASH:
     git stash ----------------------------------Regresa al todo a antes del primer cambio (control + z)
     git stash pop ------------------------------Vuelve los cambios 
     git stash drop -----------------------------Borra los cambios
     git stash list -----------------------------Muestra los cambios stash-eados
     git stash branch + 'nombreRama' ------------Se crea una rama con el cambio de stash
STASH 2.0
     git stash : ---------------Guarda el trabajo actual de manera temporal. (Archivos modificados o eliminados)
     git stash -u : ------------Crea un stash con todos los archivos. (Añadiendo los creados Untracked)
     git stash save “mensaje” : Crea un stash con el mensaje especificado.
     git stash list :---------- Permite visualizar todos los stash existentes.
     git stash clear :--------- Elimina todos los stash existentes.
     git stash drop :---------- Elimina el stash más reciente. El que tiene num_stash=0.
     git stash drop stash@{num_stash} : Elimina un stash específico.
     git stash apply :--------- Aplica el stash más reciente. El que tiene num_stash=0.
     git stash apply stash@{num_stash} : Aplica los cambios de un stash específico.
     git stash pop :----------- Aplica el stash más reciente y lo elimina. El que tiene num_stash=0.
     git stash pop stash@{num_stash} : Aplica los cambios de un stash específico y elimina lo stash.
     git stash branch nombre_de_rama : Crea una rama y aplica el stash mas reciente.
     git stash branch nombre_de_rama stash@{num_stash} : Crea una rama y aplica el stash especificado.

     Consideraciones:

          El cambio más reciente (al crear un stash) SIEMPRE recibe el valor 0 y los que estaban antes aumentan su valor.
          Al crear un stash tomará los archivos que han sido modificados y eliminados. Para que tome un archivo creado es necesario agregarlo al Staging Area con git add [nombre_archivo] con la intención de que git tenga un seguimiento de ese archivo, o también utilizando el comando git stash -u.
          Al aplicar un stash este no se elimina, es buena práctica eliminarlo.



RAMAS:
     git push -u origin + 'rama' -----------------------Sube la rama a github
     git branch + 'nombre de la rama creada' -----------Se genera una rama con el nombre seleccionado
     git checkout + 'rama' -----------------------------Se puede cambiar del master a otra rama
     git merge + rama ----------------------------------Fuciona las ramas 
     git branch ----------------------------------------Muestra todas las ramas que existen en local
     git branch -r -------------------------------------Muestra las ramas en remoto en el servidor de github
     git branch -a -------------------------------------Muestra Todas las ramas
     git branch -d + 'rama' ----------------------------Borra una rama
     git log --all --graph --decorate --oneline --------Crea un una representcion grafica de todos los cambios
     git show-branch -----------------------------------Muestra cueles ramas existen y cual a sido su historia
     git show-branch --all -----------------------------Muestra lo mismo que la otra pero mas detallada
     gitk ----------------------------------------------Muestra muy graficamente al arbolito
     git branch --no-merged-----------------------------Esto nos muestra la otra rama del proyecto. Debido a que contiene trabajos 
     ---------------------------------------------------sin fusionar, al intentar borrarla con git branch -d, el comando nos dará un error
     git branch --merge --------------------------------muestra la lista de ramas fusionadas 
          Nota: Si realmente deseas borrar la rama y perder el trabajo contenido en ella, puedes forzar el borrado con la opción -D; tal y como indica el mensaje de ayuda.
               al hacer merge si te abre la consola de vim, se puede cerrar con esc+shift+z+z
     git pull origin "rama"----------------------------Trae la rama del repositorio remoto del proyecto.
 





TAGS:
     git tag -a + 'nombre' + -m "mensaje" 469baee --Crea un tag
     git push origin --tags ------------------------Sube tags al master
     git tag -d + 'nombre' -------------------------Elimina un tag de git
     git push origin :refs/tags/'nombre' -----------Elimina el tag en GitHub





GREP:
  A medida que nuestro proyecto se hace grande vamos a querer buscar ciertas cosas.
  Por ejemplo: ¿cuántas veces en nuestro proyecto utilizamos la palabra color?
  Para buscar utilizamos el comando git grep color y nos buscará en todo el proyecto 
  los archivos en donde está la palabra color.

     git grep + 'palabra' -----------------------Muestra en que archivos estan las palabras
     git grep -n + 'palabra' --------------------Muestra la linea donde se encuentra la palabra
     git grep -c + 'palabra' --------------------Muestra la cantidad de veces que se uso
     git grep -c + "<p>" ------------------------Muestra la cantidad de veces que se uso una etiqueta lleva comillas ""
     git log -S "palabra" -----------------------Muestra las veces que se uso la palabra en los commits
     Ejemplos :
          git grep color -->use la palabra color
          git grep la --> donde use la palabra la
          git grep -n color–> en que lineas use la palabra color
          git grep -n platzi --> en que lineas use la palabra platzi
          git grep -c la --> cuantas veces use la palabra la
          git grep -c paltzi --> cuantas veces use la palabra platzi
          git grep -c “<p>”–> cuantas veces use la etiqueta <p>

          git log-S “cabecera” --> cuantas veces use la palabra cabecera en
          todos los commits.

          grep–> para los archivos
          log --> para los commits.


RECUPERAR:
*PELIGRO* Mala practica
     git reflog ---------------------------------Aqui se ve TODO!
     git reset --HARD + 'hast del commit' -------Vuelven las cosas al commit seleccionado 


REFLOG
COMO RECUPERAR SI ELIMINASTE POR ACCIDENTE TODO
     git reflog
          El método más rápido para conseguirlo suele ser utilizar una herramienta denominada git reflog.
          Según trabajas, Git suele guardar un silencioso registro de donde está HEAD en cada momento.
          Cada vez que confirmas cambios o cambias de rama, el registro (reflog) es actualizado. 
          El registro reflog se actualiza incluso cuando utilizas el comando git update-ref, 
          siendo ésta otra de las razones por las que es recomendable utilizar ese comando en lugar de escribir
          manualmente los valores SHA-1 en los archivos de referencia, tal y como hemos visto en Referencias Git.
          Con el comando git reflog puedes revisar donde has estado en cualquier momento pasado:
     *pasos:
        git reflog
        git branch ramaDeRecuperacion "hash"------- crea una rama con el hash que se desea recuperar.
     *otraOpcion:
        git reflog
        git reset --hard + "hash"--------------regresa al hash indicado borrando todo lo que esta entre tu ultimo commit y el hash donde quieres regresar

REBASE:
     rebase reescribe la historia del repositorio, cambia la historia de 
     donde comenzó la rama y solo debe ser usado de manera local.
     Es una mala practica, no deja historial, no se sabe quien hizo que.

     git rebase 'master' ---------------------------Desde la 'rama' que desea unir al master se egreada el comando ejemplo "desde el footer se ejecuta el comando"




CONFIGURACIONES:
     git config ---------------------------------Encuentras todas las configuraciones de git
     git config --list --------------------------Muestra tu configuración y que te hace falta
     git config --global user.name "ivan" -------Genera cambios al usuario 
                    user.email ".gmail.com"





AVANZADOS:
     git config --list --show-origin -------------------Puedes ver donde estan las configuraciones guardadas 





CRER UNA LLAVE SSH EN LOCAL:
     1. ssh-keygen -t rsa -b 4096 -C "carlos.ivan10043@mail.com"------------Generacion de claves de cifrado publica y privada
        (segunda opcion)ssh-keygen -t ed25519 -C "your_email@example.com"(segunda opcion en caso de que no funcione la primera)-------
     2. eval $(ssh-agent -s)-------------------Comprueba si el servicio de cifrado esta activo
     3. ssh-add ~/.ssh/(llave publica o privada)-----------informa al sistema de la ubicacion del archivo que contiene la llave privada
     simbolo de ñ: ~
     cd ~/.ssh/

*CONECCION A GITHUB CON SSH*
     git remote set-url origin <ssh-url>------configura a git para conectar con el repositorio remoto a traves de SSH(en lugar de HTTPS)
     git remote -v -----------------verifica la existencia del origen remoto
     git config -l -----------------permite ver los parametros de la configuracion y sus valores


ALGUNOS comandos
     rename 's/terminal/gitGitHub/' * --------------------------renombrar un archivo o carpeta de tu terminal

Comandos y recursos colaborativos en Git y GitHub
     git shortlog -sn = muestra cuantos commit han hecho cada miembros del equipo.
     git shortlog -sn --all = muestra cuantos commit han hecho cada miembros del equipo hasta los que han sido eliminado
     git shortlog -sn --all --no-merge = muestra cuantos commit han hecho cada miembros quitando los eliminados sin los merges
     git blame ARCHIVO = muestra quien hizo cada cosa linea por linea
     git COMANDO --help = muestra como funciona el comando.
     git blame ARCHIVO -Llinea_inicial,linea_final= muestra quien hizo cada cosa linea por linea indicándole desde que linea ver ejemplo -L35,50
     **git branch -r **= se muestran todas las ramas remotas
     git branch -a = se muestran todas las ramas tanto locales como remotas